import type { IncomingMessage, ServerResponse } from "http";
import type { GetServerSideProps, NextPage } from "next";
import { createRouter } from "next-connect";
import ErrorPage from "next/error";
import Head from "next/head";
import Link from "next/link";
import type { User } from "../../common/api";
import { getUsers, randomId, saveUsers, validateUser } from "../../common/api";
import styles from "../../styles/styles.module.css";

interface PageProps {
  users?: User[];
  error?: string;
}

const UsersPage: NextPage<PageProps> = ({ users, error }) => {
  if (error) return <ErrorPage statusCode={400} title={error} />;
  return (
    <div className={styles.container}>
      <Head>
        <title>All Users</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          <a href="https://github.com/hoangvvo/next-connect/tree/main/examples/nextjs/pages/gssp.tsx">
            getServerSideProps
          </a>{" "}
          Example
        </h1>
        <div>
          <h2 style={{ textAlign: "center" }}>All users</h2>
          <div className={styles.grid}>
            {users?.length ? (
              users.map((user) => (
                <Link href={`/gssp-users/${user.id}`} key={user.id}>
                  <a className={styles.card}>
                    <h2>{user.name}</h2>
                    <p>{user.age}</p>
                  </a>
                </Link>
              ))
            ) : (
              <p>No users</p>
            )}
          </div>
        </div>
        <div>
          <form className={styles.form} method="POST">
            <h2>Create users</h2>
            <label className={styles.label} htmlFor="name">
              What&apos;s your name?
            </label>
            <input name="name" id="name" className={styles.input} required />
            <label className={styles.label} htmlFor="age">
              How old are you?
            </label>
            <input
              type="number"
              min={0}
              max={100}
              step={1}
              name="age"
              id="age"
              className={styles.input}
              required
            />
            <button className={styles.button} type="submit">
              Submit
            </button>
            <small style={{ marginTop: "2rem" }}>
              You must be at least 8 years old to create a user
            </small>
          </form>
        </div>
      </main>
    </div>
  );
};

export default UsersPage;

const gsspRouter = createRouter<
  IncomingMessage & { body?: Record<string, string | number> },
  ServerResponse
>()
  .get((req) => {
    const users = getUsers(req);
    return { props: { users } };
  })
  .post(
    async (req, res, next) => {
      // a middleware to parse application/x-www-form-urlencoded
      req.body = await new Promise((resolve, reject) => {
        let body = "";
        req.on("error", reject);
        req.on("data", (chunk) => (body += chunk));
        req.on("end", () => {
          const searchParams = new URLSearchParams(body);
          const result: Record<string, string | number> = {};
          for (const [key, value] of searchParams) {
            if (!isNaN(parseInt(value))) {
              result[key] = parseInt(value);
            } else {
              result[key] = value;
            }
          }
          resolve(result);
        });
      });
      return next();
    },
    (req, res) => {
      const users = getUsers(req);
      const newUser = {
        id: randomId(),
        ...req.body,
      } as User;
      validateUser(newUser);
      users.push(newUser);
      saveUsers(res, users);
      return {
        props: {
          users,
        },
      };
    }
  )
  .all(() => {
    // this will be called if method is not GET or POST
    return {
      notFound: true,
      props: {},
    };
  });

export const getServerSideProps: GetServerSideProps<PageProps> = async ({
  req,
  res,
}) => {
  try {
    // need await so that error can be caught below
    return (await gsspRouter.run(req, res)) as any;
  } catch (e) {
    return {
      props: {
        error: (e as Error).message,
      },
    };
  }
};
